{"config":{"lang":["en","ja"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Still a draft.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>Are you learning Japanese and own a Steam Deck? Do you want to do look up words easily while playing Japanese games on it? If yes, this guide is for you, I will go through the tools and setup to enable you to extract and look up text in the game you're playing, and optionally create Anki cards with screenshots and audio (mining).</p> <p>If you're unfamiliar with the concept of immersion learning or Anki mining, here's a guide that goes through it.</p> <p>The bulk of this guide will be what I tried on default SteamOS. If you know a good workflow in gaming mode, do please share. I can only get these working nicely in desktop mode. I will also cover a little of my experience with dual-booting Windows on the Deck.</p> <p>If you're planning to go the Windows route (dual-boot/VM), the tips and controller section of the guide might still be helpful. Otherwise the tools are similar to Windows PC mining workflow which are shared in some other guides, for example Xelieu's Lazy Guide, or Donkuri's guide.</p> <p>If you are planning on playing a lot of VNs that are not Steam Deck certified or have native Linux support, you might have to fiddle with some proton prefixes or install additional codecs to get them playing properly. If you don't have the patience to figure out these technical details for each game, you might want to consider using Windows - see Running Windows on the Steam Deck for more info.</p>"},{"location":"#guide-structure","title":"Guide structure","text":"<p>This guide will go through:</p> <ul> <li>tools setup (you can choose to install only those you need)</li> <li>controller config and other Steam Deck tips</li> <li>demos</li> <li>extras (Windows, other resources)</li> </ul> <p>Note: I assume some familiarity with the mining workflow already and will not go in-depth into using Textractor or Agent. If you have not used them before, please refer to the tool manual or the other guides I've linked that do teach how to use them.</p> <p>Also, I will focus only on games and not cover other aspects of immersion learning such as reading novels or manga or watching anime in this guide. (I prefer to consume those media on other devices.) If you want to use the Steam Deck for those, I believe the Linux workflows for mining those should work as well, just refer to the guides linked earlier.</p>"},{"location":"OCR/","title":"OCR","text":"<p>I have only limited experience with Yomininja so far, so this section may get expanded on later. Some other alternative OCR options are the OCR engine that comes with Agent, or owocr. (I have not tried them.)</p>"},{"location":"OCR/#get-yomininja","title":"Get Yomininja","text":"<p>Yomininja has a lot of release files to cater for different operating systems; you don't need them all. Just download the <code>.AppImage</code> (example highlighted in the red box).</p> <p>Get the <code>.exe</code> if you're going to run in Windows (example highlighted in the yellow box). </p>"},{"location":"OCR/#using-the-ocr","title":"Using the OCR","text":"<p>This section will be expanded later as I get around to trying it out more.</p> <p>Launch your game, then just double click on the Yomininja AppImage to start it (it doesn't need any installation). After that, configure Yomininja settings. Try out the different settings like always-on-top, or the different OCR engines.</p> <p>Map a key to trigger Yomininja OCR in the game controller config.</p> <p>Known limitations: the always-on overlay only works with windowed games in SteamOS (not full-screen or borderless window). You can either:</p> <ul> <li>alt-tab to the overlay like how you would alt-tab to a browser texthook page</li> <li>live with windowed mode for your game</li> <li>workaround by faking a full-screen experience by setting the taskbar to autohide, hiding the window titlebar, and maximizing the window through the taskbar</li> </ul> <p>Warning</p> <p>Do not launch Yomininja with always-on-top and a full-screen game! I experienced the overlay blocking everything and couldn't quit Yomininja or the game, ended up having to force shut down by pressing the power button. Update: found out you can toggle or turn off the overlay. Make sure the shortcut is mapped to something before you start so you can avoid this experience of getting stuck!</p>"},{"location":"acknowledgements/","title":"Acknowledgements","text":"<p>I would like to thank the following people who made this guide possible:</p> <ul> <li>Xelieu who made the lazy guide which I based my Yomitan and mining setup on. Also thanks for introducing me to mkdocs and having the lazy guide page source code available for reference.</li> <li>xythh who I got the code to add screenshot and audio to Anki on Linux, I only needed to make minor edits to make them work on the Deck.</li> <li>Nerdnest (on YouTube) who made really good controller mapping tutorials and which I hope to learn and use more in the future.</li> <li>Visual Novel Wiki for the resources on getting VNs to work on Linux.</li> <li>TheMoeWay community, from which I first learnt about most of the tools involved and also gave some help when I had technical questions.</li> </ul> <p>And you, dear reader who've made it to this page, thank you. I hope there's been something useful in here for you, and feel free to reach out if you'd like to contribute to the guide or share your experiences on Japanese learning with the Steam Deck.</p>"},{"location":"acknowledgements/#contact","title":"Contact","text":"<p>I can be reached as <code>aka_baka</code> on TheMoeWay discord, or you can create pull requests for this repo. Thank you!</p>"},{"location":"beforePlaying/","title":"Getting Things Ready Before Playing","text":"<p>Make sure your desktop controller mappings support Alt-Tab, and optionally hotkeys to save cards, screenshots and audio to Anki. (only need to do this once. See the section on controller mapping for more details.)</p> <p>Also configure the game controller mapping to include Alt-Tab, and optionally trackpad for mouse move and clicks. Also optionally hotkeys to save screenshots and record audio to Anki. (Need to do per-game in Steam)</p> <p>Things you will want to launch every time you want to do immersion learning gaming:</p> <ol> <li>Browser and texthook page. Make sure Yomitan is enabled</li> <li>Anki (if you're mining, or using offline audio with it)</li> </ol> <p>I personally just launch everything manually myself, but you could write a short bash script to start them all if you want.</p> <p>It's time to then launch the game and hook it. Follow the relevant parts in the following sections, you'll only need to do one type of hooking for a game.</p>"},{"location":"controller/","title":"Controller config","text":"<p>If you're launching the game through Steam, you'll need to set up both the desktop and also game-specific configs, as the latter will apply when the game is in focus.</p> <p>If you're not launching through Steam, then the desktop config will apply. For this reason, I prefer to add my non-Steam games to Steam and launch from there, so I can have customized controller configs per game.</p> <p>Please learn how to change the controller config of games in Steam separately, I won't be covering that in this guide.</p>"},{"location":"controller/#desktop-vs-game-config","title":"Desktop vs game config","text":"<p>Game configs are per-game, and are active when the game is in focus. You need to configure this for each game. (Templates might help, see below.)</p> <p>Desktop config is active when the game is not in focus.</p> <p>As such, you'll want to ensure Alt+Tab is mapped for both configs, otherwise you may be able to tab away from the game but not back, or vice-versa.</p>"},{"location":"controller/#example-desktop-config","title":"Example desktop config","text":"<p>For reference, this is some relevant mappings I have in my desktop controller config:</p> <ul> <li>L4 to Right Alt</li> <li>R4 to Tab  (so I can hold down Alt, then keep tabbing through open windows)</li> <li>R5 to Esc (to close Yomitan popup)</li> <li>D-pad left to mine word in Yomitan to Anki (Alt+E)</li> <li>D-pad right to replay Yomitan audio (Alt+P)</li> <li>D-pad up to go to page up through results (Alt+PgUp)</li> <li>D-pad down to go to page down through results (Alt+PgDn)</li> </ul> <p>If you have a scan modifier key for Yomitan (it will only popup if the key is pressed), map that too. I leave mine to 'none' so it pops up on hover or if I tap on the touchscreen. <code>Alt</code> is a good choice for scan modifier key as it should already be mapped to a button for our alt-tab usage.</p> <p>Refer to the Yomitan docs for more shortcut keys you might be interested to use and map those if you want.</p>"},{"location":"controller/#example-game-config","title":"Example game config","text":"<p>For VNs, you'll likely want to map these actions if it's not already in your config:</p> <ul> <li>replay audio</li> <li>bring up backlog</li> <li>quick save, quick load</li> </ul> <p>If you're mining, also remember to map the keys for capturing screenshots and recording audio.</p>"},{"location":"controller/#tips","title":"Tips","text":"<p>For some reason left Alt+Tab doesn't work for me to tab away from game. But Right Alt+Tab does. Personally I map Right Alt to L4, and Tab to R4. This way, I can keep holding Alt while tabbing a few times to swap between multiple windows, instead of just toggling between the 2 most recent.</p> <p>If you're using SteamTinkerLaunch, you'll want to ensure something (I suggest touchpad) is mapped to mouse movement and click in the game config so that you can click on the menu. Or, you can use the touch screen or an external mouse when configuring SteamTinkerLaunch for your game.</p> <p>Steam + x will bring up the on-screen keyboard.</p>"},{"location":"controller/#templates","title":"Templates","text":"<p>(WIP) It should be possible to save a config as a template to make it easier to set up for other games, but I have not done this yet.</p>"},{"location":"controller/#advanced-mappings","title":"Advanced mappings","text":"<p>Examples of more fancy things you can do:</p> <ul> <li>set up different layers so the same button does different things when another button or the touchpad is pressed.</li> <li>create radial menus with the touchpad or stick</li> <li>create button menus with the touchpad</li> </ul> <p>These are useful if the game you're playing is already using the majority of buttons and you want to map more actions for Anki mining.</p> <p>You can learn more from video tutorials, eg. NerdNest's excellent one on action layers.</p>"},{"location":"demos/","title":"Demos","text":""},{"location":"demos/#trails-of-cold-steel-agent-on-windows","title":"Trails of Cold Steel + Agent on Windows","text":""},{"location":"demos/#yakuza-0-steamtinkerlaunch-windows-agent","title":"Yakuza 0 + SteamTinkerLaunch + Windows Agent","text":""},{"location":"demos/#clannad-yuzu-linux-agent","title":"Clannad + Yuzu + Linux Agent","text":""},{"location":"demos/#tsuyuchiru-lutris-textractor","title":"Tsuyuchiru + Lutris + Textractor","text":""},{"location":"demos/#bonus-yomininja","title":"Bonus: YomiNinja","text":""},{"location":"hookEmuDeck/","title":"Hooking Linux Games or Emulators","text":"<p>This is the most straightforward if Agent supports the game you want to hook. Just launch your game, then launch Agent yourself.  </p> <p>For emulators, I've only tested Yuzu. Linux version of Agent works with it. (Now that Yuzu has been taken down, you can either try to get an AppImage from a reputable source, or use Ryujinx, as Agent now supports it.) If you've tried other emulators, let me know your experience!</p> <p>I don't think Textractor supports native Linux so I doubt it can hook any emulator running with native Linux. (It can if it's running under wine/proton). If none of the texthook tools work, it's time to try OCR. (covered in the next section)</p>"},{"location":"hookLutrisGames/","title":"Hooking Lutris or Other Proton Launcher Games","text":"<p>I assume you're familiar with how to get visual novels running using Lutris or Bottles. If not, you can refer to Visual Novel wiki. The site has good instructions on setting up wineprefixes as well as having a VN compatibility list with what prefixes work for them.</p> <p>If you're unfamiliar with wine/proton, a very simple way to think of it (not very accurate, but good enough for our usage) is having mini virtual Windows PC on every \"wine/proton prefix\".  </p> <p>So the challenge is to ensure Textractor or Agent will launch in the same prefix (mini virtual Windows PC), or it won't be able to find your game. As long as you have a working prefix for your game, you can use the same prefix to launch Textractor or Agent, and everything else will work the same like hooking a Steam game.</p> <p>Note: if the VN wiki is bugging out and not displaying images, you can check archived pages at the Internet Wayback Machine instead.</p>"},{"location":"hookSteamGames/","title":"Hooking Steam Games","text":"<p>How to hook Steam games (or games you've added shortcut to Steam and launching with Steam). We'll be using SteamTinkerLaunch to fork Textractor/Agent when the game starts. This ensures Textractor/Agent will start in the same proton/wine prefix as your game. (Don't sweat it if you don't understand that last sentence, you'll learn about it when you need to.)</p> <ol> <li>download SteamTinkerLaunch</li> <li>follow the instructions at SteamTinkerLaunch page to use it with your game, either as a Compatibility Tool (if the game is not native Linux and is running on Proton), or as a Launch Option (if the game is native Linux).</li> <li>this page has a demo of adding as a compatibility tool</li> <li>launch your game. By default the SteamTinkerLaunch menu will display for 2 seconds. Click on <code>MAIN MENU</code> before it disappears.    (tip: the controller mapping for your game will be used, so you might find pressing the right trigger doesn't do a mouse click. You can use the touch screen instead, or else map something to left click in your game controller mappings.) The time this menu displays can be customized in SteamTinkerLaunch settings.</li> <li>Click on <code>GAME MENU</code>. </li> <li>In the game menu, tick <code>Fork custom command</code>, and click on the box beside <code>Custom command</code>. Select the program you need (Textractor or Agent) from where you saved them. </li> <li>click on <code>SAVE AND PLAY</code>. Your game will launch together with the the program you put in #5.</li> <li>hook the game with Textractor or Agent. (you may want to customize your game mappings so you can use trackpad as mouse and click. Especially for Agent where you'll need to drag &amp; drop the crosshair.)</li> <li>play the game, and Alt-Tab to the texthook page when you want to look up words, then Alt-Tab back. Enjoy!</li> <li>optional: once you're sure you won't want to change anything in SteamTinkerLaunch for that game, you can disable the display before the game launches.</li> </ol> <p>Note: SteamTinkerLaunch will always try to update itself before launching, so it'll take a bit more time to launch your games.</p>"},{"location":"mining/","title":"Mining","text":""},{"location":"mining/#how-to-save-screenshots-to-anki","title":"How to save screenshots to Anki","text":"<p>Save this shell script to your Deck, keep it somewhere you'll remember.</p> <p>Calling this script will capture the active window and save it to the latest Anki note, and display a notification (depending on your notification settings, you may not see it when in-game).</p> <p>With thanks to Xythh whom I got the code snippet from and just made minor edits to work on the Deck.</p> <p>Change the <code>pictureField</code> variable if your field name in the Anki card is different.</p> ss_window.sh<pre><code>#!/bin/sh\n\n### capture screnshot with spectacle\ntime=$(date +%Y-%m-%d-%H-%M-%S)\n# do not change the tmp_file path unless you know what you're doing. Anki needs access to the filepath, and if you've installed the flatpak version using the discover store, you'll need to use something like flatseal to provide access to the path if it is different from below.\n# flatpak version has access to the folder by default\ntmp_file=\"/home/deck/.var/app/net.ankiweb.Anki/$time\"\nspectacle --background --activewindow --nonotify --output $tmp_file.jpg\n\n### import to anki. Code taken from https://gist.github.com/xythh/96796571baa850783a0b49f4d325e5b2 with minor edits\nankiConnectPort=\"8765\"\npictureField=\"Picture\"\n\n# This gets your notes marked as new and returns the newest one.\nnewestNoteId=$(curl -s localhost:$ankiConnectPort -X POST -d '{\"action\": \"findNotes\", \"version\": 6, \"params\": { \"query\": \"is:new\"}}' | jq '.result[-1]')\n\n# if anki connect is running it will return your latest note id, and the following code will run, if anki connect is not running a notification pops up.\nif [ \"$newestNoteId\" != \"\" ]; then\n    curl -s localhost:$ankiConnectPort -X POST -d '{\n        \"action\": \"updateNoteFields\",\n        \"version\": 6,\n        \"params\": {\n            \"note\": {\n                \"id\": '\"$newestNoteId\"',\n                \"fields\": {\n                    \"'$pictureField'\": \"\"\n                },\n                \"picture\": [{\n                    \"path\": \"'\"$tmp_file\"'.jpg\",\n                    \"filename\": \"paste-'\"$time\"'.jpg\",\n                    \"fields\": [\n                        \"'$pictureField'\"\n                    ]\n                }]\n            }\n        }\n    }'\n    notify-send \"Saving screenshot to Anki...\"\nelse\n    notify-send \"Ankiconnect is not running, unable to save screenshot to Anki card.\"\nfi\nrm \"$tmp_file.jpg\"\n</code></pre>"},{"location":"mining/#how-to-record-audio-to-anki","title":"How to record audio to Anki","text":"<p>Save this shell script to your Deck, keep it somewhere you'll remember.</p> <p>Calling this script will start recording audio, calling it again will stop recording and save the audio clip to the latest Anki note.</p> <p>Likewise, with thanks to Xythh for 99% of the code.</p> <p>Change the <code>SentenceAudio</code> variable if your field name in the Anki card is different.</p> record_audio.sh<pre><code>#!/bin/sh\n\n# Version 1.2\n# script taken from https://gist.github.com/xythh/aab65a301a001ef6107cd54a360d4453 with minor edits\n# shoutout to https://gist.github.com/Cephian/f849e326e3522be9a4386b60b85f2f23 for the original script,\n# https://github.com/xythh/ added the ankiConnect functionality\n# # toggle record computer audio (run once to start, run again to stop)\n# # dependencies: ffmpeg, pulseaudio, curl\n# # for Steam deck: use python (or perl) instead of bc (since bc is not installed by default)\n#\n# # where recording gets saved, gets deleted after being imported to anki\n# do not change DIRECTORY unless you know what you're doing. Anki needs access to the filepath, and if you've installed the flatpak version using the discover store, you'll need to use something like flatseal to provide access to the path if it is different from below.\n# flatpak version has access to the folder by default\nDIRECTORY=\"/home/deck/.var/app/net.ankiweb.Anki/\"\nFORMAT=\"mp3\" # ogg or mp3\n# cut file since it glitches a bit at the end sometimes - I didn't need it, but you can enable if you see it.\n#CUT_DURATION=\"0.1\"\nCUT_DURATION=\"0\"\n#port used by ankiconnect\nankiConnectPort=\"8765\"\n# gets the newest created card, so make sure to create the card first with yomichan\nnewestNoteId=$(curl -s localhost:$ankiConnectPort -X POST -d '{\"action\": \"findNotes\", \"version\": 6, \"params\": { \"query\": \"is:new\"}}' | jq '.result[-1]')\n#Audio field name\naudioFieldName=\"SentenceAudio\"\n\n#if there is no newest note, you either have a complete empty anki or ankiconnect isn't running\nif [ \"$newestNoteId\" =  \"\" ]; then\n notify-send \"anki connect not found\"\n exit 1\nfi\n\nif pgrep -f \"parec\"; then\n pkill -f \"parec\"\nelse\n time=$(date +%s)\n name=\"$DIRECTORY/$time\"\n wav_file=\"$name.wav\"\n out_file=\"$name.$FORMAT\"\n\n if ! [ -d \"$DIRECTORY\" ]; then\n  mkdir \"$DIRECTORY\"\n fi\n notify-send -t 1000 \"Audio recording started\"\n #timeout 1m arecord -t wav -f cd \"$wav_file\"\n\n # just grabs last running source... may not always work if your pulseaudio setup is complicated\n if ! timeout 1m parec -d\"$(pactl list sinks | grep -B1 'State: RUNNING' | sed -nE 's/Sink #(.*)/\\1/p' | tail -n 1)\" --file-format=wav \"$wav_file\";\n then\n\n  notify-send \"Error recording \" \"most likely no audio playing\"\n  rm \"$wav_file\"\n  exit 1\n fi\n\n input_duration=$(ffprobe -v error -select_streams a:0 -show_entries stream=duration -of default=noprint_wrappers=1:nokey=1 \"$wav_file\")\n#  output_duration=$(echo \"$input_duration\"-\"$CUT_DURATION\" | bc)\n output_duration=`python -c \"print($input_duration-$CUT_DURATION)\"`\n\n # encode file and delete OG\n if [ $FORMAT = \"ogg\" ]; then\n  ffmpeg -i \"$wav_file\" -vn -codec:a libvorbis -b:a 64k -t \"$output_duration\" \"$out_file\"\n elif [ $FORMAT = \"mp3\" ]; then\n  ffmpeg -i \"$wav_file\" -vn -codec:a libmp3lame -qscale:a 1 -t \"$output_duration\" \"$out_file\"\n else\n  notify-send \"Record Error\" \"Unknown format $FORMAT\"\n fi\n rm \"$wav_file\"\n\n# Update newest note with recorded audio\ncurl -s localhost:$ankiConnectPort -X POST -d '{\n    \"action\": \"updateNoteFields\",\n    \"version\": 6,\n    \"params\": {\n        \"note\": {\n            \"id\": '\"$newestNoteId\"',\n     \"fields\": {\n                \"'$audioFieldName'\": \"\"\n            },\n            \"audio\": [{\n                \"path\": \"'\"$out_file\"'\",\n                \"filename\": \"'\"$time\"'.'$FORMAT'\",\n                \"fields\": [\n                    \"'$audioFieldName'\"\n                ]\n            }]\n        }\n    }\n}'\n# opens changed note, comment if you don't want it.\n# curl -s localhost:$ankiConnectPort -X POST -d '{\n#     \"action\": \"guiBrowse\",\n#     \"version\": 6,\n#     \"params\": {\n#         \"query\": \"nid:'\"$newestNoteId\"'\"\n#     }\n# }'\n notify-send -t 1000 \"Audio recording copied\"\n rm \"$out_file\"\nfi\n</code></pre>"},{"location":"mining/#adding-keyboard-shortcuts-to-call-the-screenshot-and-record-audio-scripts","title":"Adding keyboard shortcuts to call the screenshot and record audio scripts","text":"<p>You may want to connect a physical keyboard for this for an easier time. Alternatively, you can temporarily map the combos to a key in desktop config so you can register it, then remove the mapping later.</p> <ol> <li>Open the keyboard shortcut settings from the start menu. (easiest way is to type to find it)    </li> <li>Click on <code>Custom Shortcuts</code> on the left.</li> <li>Click <code>Edit</code>-&gt; <code>New</code>-&gt; <code>Global Shortcut</code> -&gt; <code>Command/URL</code></li> <li>Rename it, eg. to \"Anki screenshot\"</li> <li>Edit the trigger to a shortcut key combo (you'll need to map this to a controller button later). I use Alt+Shift+C for screenshot and Alt+Shift+A for audio recording, but this is totally up to you, just pick something unlikely to clash with anything else in-game or with other software. </li> <li>Edit the action to the screenshot script you saved earlier. Put the path of the script in. (Reminder: if you move the file, you'll have to edit this shortcut.) </li> <li>Repeat steps #3-6 for the script to record audio.</li> </ol>"},{"location":"mining/#mapping-the-shortcuts-and-other-actions-to-controller-buttons","title":"Mapping the shortcuts and other actions to controller buttons","text":"<p>You'll want to map controller buttons to actions we need when mining.</p> <p>Game controller config - you'll need to do this for every game. Map the shortcut triggers you set up earlier:</p> <ul> <li>save screenshot to card</li> <li>start/stop recording audio and save to card</li> </ul> <pre><code>    todo: clarify with screenshots\n</code></pre> <p>Refer to controller mapping for more details on other things to map.</p>"},{"location":"mining/#enabling-pop-up-notification-when-saving-screenshot-or-audio-to-anki","title":"Enabling pop-up notification when saving screenshot or audio to Anki","text":"<pre><code>    todo: write section with screenshots. Need to change some system notification settings so it'll show up even when you have fullscreen windows.\n</code></pre>"},{"location":"resources/","title":"(coming soon)","text":"<ul> <li>proton db</li> <li>visual novel wiki</li> <li>nerdnest vids on steam controller configs</li> <li>others: decky loader (proton badges, hltb)</li> </ul>"},{"location":"runWin/","title":"Running Windows on the Steam Deck","text":"<p>For when something really cannot work in Linux, or you're lazy to fiddle around with Lutris/Bottle/proton settings to get a VN working. Or if a texthook only seems to work in Windows (Trails of Cold Steel Agent hook, for example).</p> <p>There are a few options:</p> <ol> <li>in SteamOS, run Windows as a virtual machine (using Boxes for example)</li> <li>dual-boot Windows from a SD card. Recommended if you're testing only and not for long-term use, as there's a high likelihood the SD card will fail earlier. Also the performance is going to be bad for games in general.</li> <li>dual-boot Windows from the internal SSD (or an external SSD). This is the option I recommend. Follow this guide: Bald Sealion's Steam Deck Ultimate Windows Guide</li> </ol>"},{"location":"runWin/#tools-on-windows","title":"Tools on Windows","text":"<p>There are some tools I did not recommend in the main guide as the installation is a pain in Linux. If you're using Windows, you can consider using these tools:</p> <ol> <li>JL as an alternative to texthook pages. This overlays the text directly on top of the game window. Limitation: it supports mining to Anki, but not handlebars so you might not be able to use fancy Anki card templates that you use with Yomitan on a browser.</li> <li>ShareX is an essential tool, you can get screenshots and record audio easily. (On SteamOS, we just use the built-in Spectacle and some bash scripts instead)</li> </ol>"},{"location":"setupIntro/","title":"Setup Introduction","text":"<p>Unless otherwise specified, all the setup and usage will be in SteamOS desktop mode. To make things simple, I'll stick to using either flatpaks from the Discover app, appimages, or software that are easily installed with scripts.</p> <p>There are a few components to the gaming immersion flow:</p> <ol> <li>the game itself</li> <li>a tool to extract text from the game as you play (Textractor/Agent/OCR tools etc)</li> <li>something to display the extracted text (typically in a browser)</li> <li>something to look up the vocab in a dictionary</li> <li>(optional) mine to Anki (optionally saving screenshots and audio too) for revision study later</li> </ol>"},{"location":"setupIntro/#starting-setup","title":"Starting setup","text":"<p>If you're in gaming mode, switch over to desktop mode. (Press the <code>Steam</code> button -&gt; <code>power</code> -&gt; <code>switch to desktop mode</code>)</p> <p>Follow the steps in the next sections. If you're not planning on mining to Anki, you can follow the steps to texthook/OCR and Yomitan, and ignore the parts about Anki and Ankiconnect.</p>"},{"location":"setupTools/","title":"Tools","text":""},{"location":"setupTools/#to-extract-text-as-you-play-the-game","title":"To extract text as you play the game","text":"<p>If you know what the game needs, you can just get that. Or grab them all to be well-prepared for a variety of games.</p>"},{"location":"setupTools/#textractor","title":"Textractor","text":"<p>Download Textractor here. You can also get the latest unofficial alpha build from this thread that has updates and should support more games. Unzip and keep it in a folder you remember. We'll need this path later.  </p>"},{"location":"setupTools/#agent","title":"Agent","text":"<p>Download Agent here. Get both the Windows and Linux versions. Unzip them and keep them in a folder you remember, we'll need the paths later. I personally don't use their OCR server, but other OCR tools below. You can try it out though.</p>"},{"location":"setupTools/#ocr-limited-personal-experience-will-update-more-later","title":"OCR - limited personal experience, will update more later","text":"<p>Some options:</p> <ul> <li>YomiNinja - Use the Linux AppImage from the latest release. This tool is still fast-evolving. You can follow news updates on their Patreon to get a sneak peek of the upcoming features.</li> <li>owocr - I haven't tried this out yet, may not need this now that Yomininja also supports Google Lens and manga-ocr.</li> </ul>"},{"location":"setupTools/#to-display-and-look-up-text","title":"To display and look up text","text":""},{"location":"setupTools/#a-browser-that-supports-yomitan-extension-eg-firefox-chrome-chromium-browsers","title":"A browser that supports Yomitan extension (eg. Firefox, Chrome, Chromium browsers)","text":"<p>Install your favorite browser through the Discover store.</p>"},{"location":"setupTools/#yomitan-extension","title":"Yomitan extension","text":"<p>Download the extension from your respective browser store, and refer to the Yomitan main page for instructions on migrating from Yomichan/setting up etc. If you already have a working Yomichan/Yomitan setup on another device, you can export the dictionaries and settings, and import on the Steam Deck. If you're starting from scratch and want a quick setup, you can consider using Xelieu's Lazy Guide or Donkuri's guide.</p>"},{"location":"setupTools/#a-browser-texthook-page","title":"A browser texthook page","text":"<p>Pick one you like. I recommend pages that use websocket instead of relying on clipboard inserter (older and inferior method):  </p> <ul> <li> <p>exSTATic has historical stats visualization in addition to the texthook page. Remember to install the TextractorSender dll too, as listed in the instructions.</p> </li> <li> <p>Renji-XD's texthooker-ui page. Also install a websocket hook (eg. textractor-websocket or TextractorSender).</p> </li> </ul>"},{"location":"setupTools/#to-mine-vocab-to-anki","title":"To mine vocab to Anki","text":""},{"location":"setupTools/#anki","title":"Anki","text":"<p>Install Anki from Discover store.</p>"},{"location":"setupTools/#anki-addons","title":"Anki addons","text":"<p>Install Ankiconnect. You'll need this to add Anki cards from Yomitan.</p>"},{"location":"setupTools/#mining-with-yomitan","title":"Mining with Yomitan","text":"<p>Make sure your Yomitan settings are correct and it's able to see the Anki deck you'll add cards to, all fields are correct, etc.</p>"},{"location":"setupTools/#optional-offline-and-more-audio-sources-for-yomitan","title":"Optional: offline and more audio sources for Yomitan","text":"<p>Follow the guide here to enable offline and more audio sources for Yomitan. Note: by default, this uses Anki to run, but you can also host it locally using Python 3.9 or above. Also, this will take up ~2.5 to 5GB of disk space depending on the audio format you choose, please ensure you have enough space.</p>"},{"location":"tips/","title":"Tips","text":""},{"location":"tips/#misc-tips","title":"Misc tips","text":"<ul> <li>Adjust zoom factor of Yomitan and your texthook page. I like to use between 110 - 150%.</li> <li>There are times (especially when setting up) where it'll be much easier if you have a keyboard and mouse. A few options:</li> <li>Use bluetooth kb+m</li> <li>Get a usb-c dock and connect your kb+m</li> <li>Remote desktop (either through Steam remote play or other software)</li> <li>window mode for games are more stable than fullscreen since we have to alt+tab often. Use frameless window option if the game supports it.</li> <li>back buttons are good candidates to map for our window switching, OCR, and mining actions</li> <li>map single click and moving the cursor to separate trackpads for easier click and drag (if you're attempting OCR where you have to drag a region)</li> <li>you can map double click by using extra command of type \"start press\" and put a delay</li> <li>disable mouse in the game if supported to avoid camera moving around or accidentally advancing text when grabbing a screenshot for OCR. Eg. Senpatcher for Sen no Kiseki can disable mouse in-game</li> </ul>"},{"location":"tips/#transferring-files","title":"Transferring files","text":"<p>Options:</p> <ul> <li>SFTP (eg, WinSCP or FileZilla on Windows) - recommended as it was the easiest for me.</li> <li>KDE Connect (only for small files, it fails for files larger than a couple of GB for me)</li> <li>Warpinator (failed a few times on me)</li> </ul> <p>Others I know of but didn't use:</p> <ul> <li>Syncthing</li> <li>sshfs</li> <li>deckMTP</li> <li>cloud services (eg, Google Drive, Dropbox, etc)</li> <li>USB drives or SD cards (note: some filesystem formats may not be recognized by Linux, or Windows)</li> </ul>"}]}